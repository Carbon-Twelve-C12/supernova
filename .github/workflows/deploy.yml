name: Deploy to Docker Hub and Kubernetes

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_kubernetes:
        description: 'Skip Kubernetes deployment'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event.inputs.skip_kubernetes != 'true' }}
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: ${{ secrets.KUBE_CONTEXT }}

      - name: Update image tag in deployment
        run: |
          DEPLOY_ENV="${{ github.event.inputs.environment || 'staging' }}"
          TAG="${{ github.ref_type == 'tag' && github.ref_name || github.sha }}"
          
          # Update the image tag in the deployment files
          sed -i "s|image: supernova:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG|g" kubernetes/supernova-deployment.yaml
          
          # Apply different configurations based on environment
          if [ "$DEPLOY_ENV" == "production" ]; then
            # Apply production-specific configurations
            kubectl apply -f kubernetes/supernova-deployment.yaml
          else
            # Apply staging-specific configurations
            kubectl apply -f kubernetes/supernova-deployment.yaml
          fi

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/supernova-full-node -n supernova --timeout=300s
          kubectl rollout status deployment/supernova-miner -n supernova --timeout=300s
          echo "Deployment completed successfully!"

  notify:
    name: Notify on Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-kubernetes]
    if: always()
    
    steps:
      - name: Notify success for Docker push
        if: ${{ needs.build-and-push.result == 'success' }}
        run: |
          echo "✅ Docker image built and pushed successfully!"
      
      - name: Notify Slack success (if configured)
        if: ${{ needs.build-and-push.result == 'success' && (github.event.inputs.skip_kubernetes == 'true' || needs.deploy-to-kubernetes.result == 'success') && env.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Deployment successful for ${{ github.repository }} to ${{ github.event.inputs.environment || 'staging' }}! \nTag: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack failure (if configured)
        if: ${{ (needs.build-and-push.result != 'success' || (github.event.inputs.skip_kubernetes != 'true' && needs.deploy-to-kubernetes.result != 'success')) && env.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ Deployment failed for ${{ github.repository }}! \nPlease check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 