//! Script Opcodes for Supernova
//!
//! This module defines all opcodes supported by the Supernova script system.

use std::fmt;

/// Script opcodes
/// Using Bitcoin's OP_X naming convention for protocol compatibility
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum Opcode {
    // Push value
    OP_0 = 0x00,
    OP_PUSHDATA1 = 0x4c,
    OP_PUSHDATA2 = 0x4d,
    OP_PUSHDATA4 = 0x4e,
    OP_1NEGATE = 0x4f,
    OP_RESERVED = 0x50,
    OP_1 = 0x51,
    OP_2 = 0x52,
    OP_3 = 0x53,
    OP_4 = 0x54,
    OP_5 = 0x55,
    OP_6 = 0x56,
    OP_7 = 0x57,
    OP_8 = 0x58,
    OP_9 = 0x59,
    OP_10 = 0x5a,
    OP_11 = 0x5b,
    OP_12 = 0x5c,
    OP_13 = 0x5d,
    OP_14 = 0x5e,
    OP_15 = 0x5f,
    OP_16 = 0x60,

    // Control
    OP_NOP = 0x61,
    OP_VER = 0x62,
    OP_IF = 0x63,
    OP_NOTIF = 0x64,
    OP_VERIF = 0x65,
    OP_VERNOTIF = 0x66,
    OP_ELSE = 0x67,
    OP_ENDIF = 0x68,
    OP_VERIFY = 0x69,
    OP_RETURN = 0x6a,

    // Stack operations
    OP_TOALTSTACK = 0x6b,
    OP_FROMALTSTACK = 0x6c,
    OP_2DROP = 0x6d,
    OP_2DUP = 0x6e,
    OP_3DUP = 0x6f,
    OP_2OVER = 0x70,
    OP_2ROT = 0x71,
    OP_2SWAP = 0x72,
    OP_IFDUP = 0x73,
    OP_DEPTH = 0x74,
    OP_DROP = 0x75,
    OP_DUP = 0x76,
    OP_NIP = 0x77,
    OP_OVER = 0x78,
    OP_PICK = 0x79,
    OP_ROLL = 0x7a,
    OP_ROT = 0x7b,
    OP_SWAP = 0x7c,
    OP_TUCK = 0x7d,

    // Splice operations
    OP_CAT = 0x7e,
    OP_SUBSTR = 0x7f,
    OP_LEFT = 0x80,
    OP_RIGHT = 0x81,
    OP_SIZE = 0x82,

    // Bit logic
    OP_INVERT = 0x83,
    OP_AND = 0x84,
    OP_OR = 0x85,
    OP_XOR = 0x86,
    OP_EQUAL = 0x87,
    OP_EQUALVERIFY = 0x88,
    OP_RESERVED1 = 0x89,
    OP_RESERVED2 = 0x8a,

    // Numeric
    OP_1ADD = 0x8b,
    OP_1SUB = 0x8c,
    OP_2MUL = 0x8d,
    OP_2DIV = 0x8e,
    OP_NEGATE = 0x8f,
    OP_ABS = 0x90,
    OP_NOT = 0x91,
    OP_0NOTEQUAL = 0x92,
    OP_ADD = 0x93,
    OP_SUB = 0x94,
    OP_MUL = 0x95,
    OP_DIV = 0x96,
    OP_MOD = 0x97,
    OP_LSHIFT = 0x98,
    OP_RSHIFT = 0x99,
    OP_BOOLAND = 0x9a,
    OP_BOOLOR = 0x9b,
    OP_NUMEQUAL = 0x9c,
    OP_NUMEQUALVERIFY = 0x9d,
    OP_NUMNOTEQUAL = 0x9e,
    OP_LESSTHAN = 0x9f,
    OP_GREATERTHAN = 0xa0,
    OP_LESSTHANOREQUAL = 0xa1,
    OP_GREATERTHANOREQUAL = 0xa2,
    OP_MIN = 0xa3,
    OP_MAX = 0xa4,
    OP_WITHIN = 0xa5,

    // Crypto
    OP_RIPEMD160 = 0xa6,
    OP_SHA1 = 0xa7,
    OP_SHA256 = 0xa8,
    OP_HASH160 = 0xa9,
    OP_HASH256 = 0xaa,
    OP_CODESEPARATOR = 0xab,
    OP_CHECKSIG = 0xac,
    OP_CHECKSIGVERIFY = 0xad,
    OP_CHECKMULTISIG = 0xae,
    OP_CHECKMULTISIGVERIFY = 0xaf,

    // NOP expansion
    OP_NOP1 = 0xb0,
    OP_CHECKLOCKTIMEVERIFY = 0xb1,
    OP_CHECKSEQUENCEVERIFY = 0xb2,
    OP_NOP4 = 0xb3,
    OP_NOP5 = 0xb4,
    OP_NOP6 = 0xb5,
    OP_NOP7 = 0xb6,
    OP_NOP8 = 0xb7,
    OP_NOP9 = 0xb8,
    OP_NOP10 = 0xb9,

    // Invalid opcodes
    OP_INVALIDOPCODE = 0xff,
}

impl Opcode {
    /// Create an opcode from a byte value
    pub fn from_byte(byte: u8) -> Option<Self> {
        match byte {
            0x00 => Some(Opcode::OP_0),
            0x4c => Some(Opcode::OP_PUSHDATA1),
            0x4d => Some(Opcode::OP_PUSHDATA2),
            0x4e => Some(Opcode::OP_PUSHDATA4),
            0x4f => Some(Opcode::OP_1NEGATE),
            0x50 => Some(Opcode::OP_RESERVED),
            0x51 => Some(Opcode::OP_1),
            0x52 => Some(Opcode::OP_2),
            0x53 => Some(Opcode::OP_3),
            0x54 => Some(Opcode::OP_4),
            0x55 => Some(Opcode::OP_5),
            0x56 => Some(Opcode::OP_6),
            0x57 => Some(Opcode::OP_7),
            0x58 => Some(Opcode::OP_8),
            0x59 => Some(Opcode::OP_9),
            0x5a => Some(Opcode::OP_10),
            0x5b => Some(Opcode::OP_11),
            0x5c => Some(Opcode::OP_12),
            0x5d => Some(Opcode::OP_13),
            0x5e => Some(Opcode::OP_14),
            0x5f => Some(Opcode::OP_15),
            0x60 => Some(Opcode::OP_16),
            0x61 => Some(Opcode::OP_NOP),
            0x62 => Some(Opcode::OP_VER),
            0x63 => Some(Opcode::OP_IF),
            0x64 => Some(Opcode::OP_NOTIF),
            0x65 => Some(Opcode::OP_VERIF),
            0x66 => Some(Opcode::OP_VERNOTIF),
            0x67 => Some(Opcode::OP_ELSE),
            0x68 => Some(Opcode::OP_ENDIF),
            0x69 => Some(Opcode::OP_VERIFY),
            0x6a => Some(Opcode::OP_RETURN),
            0x6b => Some(Opcode::OP_TOALTSTACK),
            0x6c => Some(Opcode::OP_FROMALTSTACK),
            0x6d => Some(Opcode::OP_2DROP),
            0x6e => Some(Opcode::OP_2DUP),
            0x6f => Some(Opcode::OP_3DUP),
            0x70 => Some(Opcode::OP_2OVER),
            0x71 => Some(Opcode::OP_2ROT),
            0x72 => Some(Opcode::OP_2SWAP),
            0x73 => Some(Opcode::OP_IFDUP),
            0x74 => Some(Opcode::OP_DEPTH),
            0x75 => Some(Opcode::OP_DROP),
            0x76 => Some(Opcode::OP_DUP),
            0x77 => Some(Opcode::OP_NIP),
            0x78 => Some(Opcode::OP_OVER),
            0x79 => Some(Opcode::OP_PICK),
            0x7a => Some(Opcode::OP_ROLL),
            0x7b => Some(Opcode::OP_ROT),
            0x7c => Some(Opcode::OP_SWAP),
            0x7d => Some(Opcode::OP_TUCK),
            0x7e => Some(Opcode::OP_CAT),
            0x7f => Some(Opcode::OP_SUBSTR),
            0x80 => Some(Opcode::OP_LEFT),
            0x81 => Some(Opcode::OP_RIGHT),
            0x82 => Some(Opcode::OP_SIZE),
            0x83 => Some(Opcode::OP_INVERT),
            0x84 => Some(Opcode::OP_AND),
            0x85 => Some(Opcode::OP_OR),
            0x86 => Some(Opcode::OP_XOR),
            0x87 => Some(Opcode::OP_EQUAL),
            0x88 => Some(Opcode::OP_EQUALVERIFY),
            0x89 => Some(Opcode::OP_RESERVED1),
            0x8a => Some(Opcode::OP_RESERVED2),
            0x8b => Some(Opcode::OP_1ADD),
            0x8c => Some(Opcode::OP_1SUB),
            0x8d => Some(Opcode::OP_2MUL),
            0x8e => Some(Opcode::OP_2DIV),
            0x8f => Some(Opcode::OP_NEGATE),
            0x90 => Some(Opcode::OP_ABS),
            0x91 => Some(Opcode::OP_NOT),
            0x92 => Some(Opcode::OP_0NOTEQUAL),
            0x93 => Some(Opcode::OP_ADD),
            0x94 => Some(Opcode::OP_SUB),
            0x95 => Some(Opcode::OP_MUL),
            0x96 => Some(Opcode::OP_DIV),
            0x97 => Some(Opcode::OP_MOD),
            0x98 => Some(Opcode::OP_LSHIFT),
            0x99 => Some(Opcode::OP_RSHIFT),
            0x9a => Some(Opcode::OP_BOOLAND),
            0x9b => Some(Opcode::OP_BOOLOR),
            0x9c => Some(Opcode::OP_NUMEQUAL),
            0x9d => Some(Opcode::OP_NUMEQUALVERIFY),
            0x9e => Some(Opcode::OP_NUMNOTEQUAL),
            0x9f => Some(Opcode::OP_LESSTHAN),
            0xa0 => Some(Opcode::OP_GREATERTHAN),
            0xa1 => Some(Opcode::OP_LESSTHANOREQUAL),
            0xa2 => Some(Opcode::OP_GREATERTHANOREQUAL),
            0xa3 => Some(Opcode::OP_MIN),
            0xa4 => Some(Opcode::OP_MAX),
            0xa5 => Some(Opcode::OP_WITHIN),
            0xa6 => Some(Opcode::OP_RIPEMD160),
            0xa7 => Some(Opcode::OP_SHA1),
            0xa8 => Some(Opcode::OP_SHA256),
            0xa9 => Some(Opcode::OP_HASH160),
            0xaa => Some(Opcode::OP_HASH256),
            0xab => Some(Opcode::OP_CODESEPARATOR),
            0xac => Some(Opcode::OP_CHECKSIG),
            0xad => Some(Opcode::OP_CHECKSIGVERIFY),
            0xae => Some(Opcode::OP_CHECKMULTISIG),
            0xaf => Some(Opcode::OP_CHECKMULTISIGVERIFY),
            0xb0 => Some(Opcode::OP_NOP1),
            0xb1 => Some(Opcode::OP_CHECKLOCKTIMEVERIFY),
            0xb2 => Some(Opcode::OP_CHECKSEQUENCEVERIFY),
            0xb3 => Some(Opcode::OP_NOP4),
            0xb4 => Some(Opcode::OP_NOP5),
            0xb5 => Some(Opcode::OP_NOP6),
            0xb6 => Some(Opcode::OP_NOP7),
            0xb7 => Some(Opcode::OP_NOP8),
            0xb8 => Some(Opcode::OP_NOP9),
            0xb9 => Some(Opcode::OP_NOP10),
            0xff => Some(Opcode::OP_INVALIDOPCODE),
            // Direct push opcodes (1-75 bytes)
            1..=75 => None, // These are handled specially
            _ => None,
        }
    }

    /// Get the byte value of this opcode
    pub fn to_byte(&self) -> u8 {
        *self as u8
    }

    /// Check if this opcode is disabled
    pub fn is_disabled(&self) -> bool {
        matches!(
            self,
            Opcode::OP_CAT
                | Opcode::OP_SUBSTR
                | Opcode::OP_LEFT
                | Opcode::OP_RIGHT
                | Opcode::OP_INVERT
                | Opcode::OP_AND
                | Opcode::OP_OR
                | Opcode::OP_XOR
                | Opcode::OP_2MUL
                | Opcode::OP_2DIV
                | Opcode::OP_MUL
                | Opcode::OP_DIV
                | Opcode::OP_MOD
                | Opcode::OP_LSHIFT
                | Opcode::OP_RSHIFT
        )
    }

    /// Check if this is a push opcode
    pub fn is_push_opcode(&self) -> bool {
        matches!(
            self,
            Opcode::OP_PUSHDATA1 | Opcode::OP_PUSHDATA2 | Opcode::OP_PUSHDATA4
        )
    }

    /// Check if this is a conditional opcode
    pub fn is_conditional(&self) -> bool {
        matches!(
            self,
            Opcode::OP_IF | Opcode::OP_NOTIF | Opcode::OP_ELSE | Opcode::OP_ENDIF
        )
    }
}

impl fmt::Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let name = match self {
            Opcode::OP_0 => "OP_0",
            Opcode::OP_PUSHDATA1 => "OP_PUSHDATA1",
            Opcode::OP_PUSHDATA2 => "OP_PUSHDATA2",
            Opcode::OP_PUSHDATA4 => "OP_PUSHDATA4",
            Opcode::OP_1NEGATE => "OP_1NEGATE",
            Opcode::OP_RESERVED => "OP_RESERVED",
            Opcode::OP_1 => "OP_1",
            Opcode::OP_2 => "OP_2",
            Opcode::OP_3 => "OP_3",
            Opcode::OP_4 => "OP_4",
            Opcode::OP_5 => "OP_5",
            Opcode::OP_6 => "OP_6",
            Opcode::OP_7 => "OP_7",
            Opcode::OP_8 => "OP_8",
            Opcode::OP_9 => "OP_9",
            Opcode::OP_10 => "OP_10",
            Opcode::OP_11 => "OP_11",
            Opcode::OP_12 => "OP_12",
            Opcode::OP_13 => "OP_13",
            Opcode::OP_14 => "OP_14",
            Opcode::OP_15 => "OP_15",
            Opcode::OP_16 => "OP_16",
            Opcode::OP_NOP => "OP_NOP",
            Opcode::OP_VER => "OP_VER",
            Opcode::OP_IF => "OP_IF",
            Opcode::OP_NOTIF => "OP_NOTIF",
            Opcode::OP_VERIF => "OP_VERIF",
            Opcode::OP_VERNOTIF => "OP_VERNOTIF",
            Opcode::OP_ELSE => "OP_ELSE",
            Opcode::OP_ENDIF => "OP_ENDIF",
            Opcode::OP_VERIFY => "OP_VERIFY",
            Opcode::OP_RETURN => "OP_RETURN",
            Opcode::OP_TOALTSTACK => "OP_TOALTSTACK",
            Opcode::OP_FROMALTSTACK => "OP_FROMALTSTACK",
            Opcode::OP_2DROP => "OP_2DROP",
            Opcode::OP_2DUP => "OP_2DUP",
            Opcode::OP_3DUP => "OP_3DUP",
            Opcode::OP_2OVER => "OP_2OVER",
            Opcode::OP_2ROT => "OP_2ROT",
            Opcode::OP_2SWAP => "OP_2SWAP",
            Opcode::OP_IFDUP => "OP_IFDUP",
            Opcode::OP_DEPTH => "OP_DEPTH",
            Opcode::OP_DROP => "OP_DROP",
            Opcode::OP_DUP => "OP_DUP",
            Opcode::OP_NIP => "OP_NIP",
            Opcode::OP_OVER => "OP_OVER",
            Opcode::OP_PICK => "OP_PICK",
            Opcode::OP_ROLL => "OP_ROLL",
            Opcode::OP_ROT => "OP_ROT",
            Opcode::OP_SWAP => "OP_SWAP",
            Opcode::OP_TUCK => "OP_TUCK",
            Opcode::OP_CAT => "OP_CAT",
            Opcode::OP_SUBSTR => "OP_SUBSTR",
            Opcode::OP_LEFT => "OP_LEFT",
            Opcode::OP_RIGHT => "OP_RIGHT",
            Opcode::OP_SIZE => "OP_SIZE",
            Opcode::OP_INVERT => "OP_INVERT",
            Opcode::OP_AND => "OP_AND",
            Opcode::OP_OR => "OP_OR",
            Opcode::OP_XOR => "OP_XOR",
            Opcode::OP_EQUAL => "OP_EQUAL",
            Opcode::OP_EQUALVERIFY => "OP_EQUALVERIFY",
            Opcode::OP_RESERVED1 => "OP_RESERVED1",
            Opcode::OP_RESERVED2 => "OP_RESERVED2",
            Opcode::OP_1ADD => "OP_1ADD",
            Opcode::OP_1SUB => "OP_1SUB",
            Opcode::OP_2MUL => "OP_2MUL",
            Opcode::OP_2DIV => "OP_2DIV",
            Opcode::OP_NEGATE => "OP_NEGATE",
            Opcode::OP_ABS => "OP_ABS",
            Opcode::OP_NOT => "OP_NOT",
            Opcode::OP_0NOTEQUAL => "OP_0NOTEQUAL",
            Opcode::OP_ADD => "OP_ADD",
            Opcode::OP_SUB => "OP_SUB",
            Opcode::OP_MUL => "OP_MUL",
            Opcode::OP_DIV => "OP_DIV",
            Opcode::OP_MOD => "OP_MOD",
            Opcode::OP_LSHIFT => "OP_LSHIFT",
            Opcode::OP_RSHIFT => "OP_RSHIFT",
            Opcode::OP_BOOLAND => "OP_BOOLAND",
            Opcode::OP_BOOLOR => "OP_BOOLOR",
            Opcode::OP_NUMEQUAL => "OP_NUMEQUAL",
            Opcode::OP_NUMEQUALVERIFY => "OP_NUMEQUALVERIFY",
            Opcode::OP_NUMNOTEQUAL => "OP_NUMNOTEQUAL",
            Opcode::OP_LESSTHAN => "OP_LESSTHAN",
            Opcode::OP_GREATERTHAN => "OP_GREATERTHAN",
            Opcode::OP_LESSTHANOREQUAL => "OP_LESSTHANOREQUAL",
            Opcode::OP_GREATERTHANOREQUAL => "OP_GREATERTHANOREQUAL",
            Opcode::OP_MIN => "OP_MIN",
            Opcode::OP_MAX => "OP_MAX",
            Opcode::OP_WITHIN => "OP_WITHIN",
            Opcode::OP_RIPEMD160 => "OP_RIPEMD160",
            Opcode::OP_SHA1 => "OP_SHA1",
            Opcode::OP_SHA256 => "OP_SHA256",
            Opcode::OP_HASH160 => "OP_HASH160",
            Opcode::OP_HASH256 => "OP_HASH256",
            Opcode::OP_CODESEPARATOR => "OP_CODESEPARATOR",
            Opcode::OP_CHECKSIG => "OP_CHECKSIG",
            Opcode::OP_CHECKSIGVERIFY => "OP_CHECKSIGVERIFY",
            Opcode::OP_CHECKMULTISIG => "OP_CHECKMULTISIG",
            Opcode::OP_CHECKMULTISIGVERIFY => "OP_CHECKMULTISIGVERIFY",
            Opcode::OP_NOP1 => "OP_NOP1",
            Opcode::OP_CHECKLOCKTIMEVERIFY => "OP_CHECKLOCKTIMEVERIFY",
            Opcode::OP_CHECKSEQUENCEVERIFY => "OP_CHECKSEQUENCEVERIFY",
            Opcode::OP_NOP4 => "OP_NOP4",
            Opcode::OP_NOP5 => "OP_NOP5",
            Opcode::OP_NOP6 => "OP_NOP6",
            Opcode::OP_NOP7 => "OP_NOP7",
            Opcode::OP_NOP8 => "OP_NOP8",
            Opcode::OP_NOP9 => "OP_NOP9",
            Opcode::OP_NOP10 => "OP_NOP10",
            Opcode::OP_INVALIDOPCODE => "OP_INVALIDOPCODE",
        };
        write!(f, "{}", name)
    }
}

/// List of all valid opcodes
pub const ALL_OPCODES: &[Opcode] = &[
    Opcode::OP_0,
    Opcode::OP_PUSHDATA1,
    Opcode::OP_PUSHDATA2,
    Opcode::OP_PUSHDATA4,
    Opcode::OP_1NEGATE,
    Opcode::OP_RESERVED,
    Opcode::OP_1,
    Opcode::OP_2,
    Opcode::OP_3,
    Opcode::OP_4,
    Opcode::OP_5,
    Opcode::OP_6,
    Opcode::OP_7,
    Opcode::OP_8,
    Opcode::OP_9,
    Opcode::OP_10,
    Opcode::OP_11,
    Opcode::OP_12,
    Opcode::OP_13,
    Opcode::OP_14,
    Opcode::OP_15,
    Opcode::OP_16,
    Opcode::OP_NOP,
    Opcode::OP_VER,
    Opcode::OP_IF,
    Opcode::OP_NOTIF,
    Opcode::OP_VERIF,
    Opcode::OP_VERNOTIF,
    Opcode::OP_ELSE,
    Opcode::OP_ENDIF,
    Opcode::OP_VERIFY,
    Opcode::OP_RETURN,
    Opcode::OP_TOALTSTACK,
    Opcode::OP_FROMALTSTACK,
    Opcode::OP_2DROP,
    Opcode::OP_2DUP,
    Opcode::OP_3DUP,
    Opcode::OP_2OVER,
    Opcode::OP_2ROT,
    Opcode::OP_2SWAP,
    Opcode::OP_IFDUP,
    Opcode::OP_DEPTH,
    Opcode::OP_DROP,
    Opcode::OP_DUP,
    Opcode::OP_NIP,
    Opcode::OP_OVER,
    Opcode::OP_PICK,
    Opcode::OP_ROLL,
    Opcode::OP_ROT,
    Opcode::OP_SWAP,
    Opcode::OP_TUCK,
    Opcode::OP_CAT,
    Opcode::OP_SUBSTR,
    Opcode::OP_LEFT,
    Opcode::OP_RIGHT,
    Opcode::OP_SIZE,
    Opcode::OP_INVERT,
    Opcode::OP_AND,
    Opcode::OP_OR,
    Opcode::OP_XOR,
    Opcode::OP_EQUAL,
    Opcode::OP_EQUALVERIFY,
    Opcode::OP_RESERVED1,
    Opcode::OP_RESERVED2,
    Opcode::OP_1ADD,
    Opcode::OP_1SUB,
    Opcode::OP_2MUL,
    Opcode::OP_2DIV,
    Opcode::OP_NEGATE,
    Opcode::OP_ABS,
    Opcode::OP_NOT,
    Opcode::OP_0NOTEQUAL,
    Opcode::OP_ADD,
    Opcode::OP_SUB,
    Opcode::OP_MUL,
    Opcode::OP_DIV,
    Opcode::OP_MOD,
    Opcode::OP_LSHIFT,
    Opcode::OP_RSHIFT,
    Opcode::OP_BOOLAND,
    Opcode::OP_BOOLOR,
    Opcode::OP_NUMEQUAL,
    Opcode::OP_NUMEQUALVERIFY,
    Opcode::OP_NUMNOTEQUAL,
    Opcode::OP_LESSTHAN,
    Opcode::OP_GREATERTHAN,
    Opcode::OP_LESSTHANOREQUAL,
    Opcode::OP_GREATERTHANOREQUAL,
    Opcode::OP_MIN,
    Opcode::OP_MAX,
    Opcode::OP_WITHIN,
    Opcode::OP_RIPEMD160,
    Opcode::OP_SHA1,
    Opcode::OP_SHA256,
    Opcode::OP_HASH160,
    Opcode::OP_HASH256,
    Opcode::OP_CODESEPARATOR,
    Opcode::OP_CHECKSIG,
    Opcode::OP_CHECKSIGVERIFY,
    Opcode::OP_CHECKMULTISIG,
    Opcode::OP_CHECKMULTISIGVERIFY,
    Opcode::OP_NOP1,
    Opcode::OP_CHECKLOCKTIMEVERIFY,
    Opcode::OP_CHECKSEQUENCEVERIFY,
    Opcode::OP_NOP4,
    Opcode::OP_NOP5,
    Opcode::OP_NOP6,
    Opcode::OP_NOP7,
    Opcode::OP_NOP8,
    Opcode::OP_NOP9,
    Opcode::OP_NOP10,
    Opcode::OP_INVALIDOPCODE,
];
